fn main() {
    divan::main();
}

use sudoku::solve;

#[divan::bench]
fn expert() {
    let _ = solve(vec![
        vec![9, 0, 0, 0, 7, 0, 0, 2, 0],
        vec![0, 8, 0, 0, 6, 0, 0, 0, 3],
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0],
        vec![4, 0, 0, 0, 0, 0, 0, 0, 1],
        vec![2, 0, 0, 0, 4, 6, 3, 0, 0],
        vec![6, 0, 0, 0, 9, 0, 0, 0, 8],
        vec![0, 5, 0, 0, 3, 0, 0, 0, 7],
        vec![0, 0, 0, 4, 0, 1, 0, 0, 0],
        vec![0, 9, 0, 7, 0, 0, 1, 0, 0],
    ]);
}

#[divan::bench]
fn extreme() {
    let _ = solve(vec![
        vec![2, 0, 4, 0, 0, 0, 0, 0, 0],
        vec![1, 0, 7, 0, 9, 0, 0, 0, 2],
        vec![0, 0, 0, 0, 0, 0, 7, 0, 0],
        vec![6, 0, 0, 0, 0, 1, 0, 0, 0],
        vec![0, 0, 0, 0, 2, 0, 6, 0, 3],
        vec![8, 0, 1, 0, 4, 9, 0, 0, 0],
        vec![4, 0, 0, 0, 6, 0, 0, 7, 0],
        vec![0, 0, 0, 0, 0, 0, 0, 0, 9],
        vec![0, 0, 0, 3, 0, 0, 5, 6, 0],
    ]);
}

#[divan::bench]
fn free() {
    let _ = solve(vec![
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0],
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0],
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0],
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0],
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0],
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0],
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0],
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0],
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]);
}

#[divan::bench]
fn master() {
    let _ = solve(vec![
        vec![0, 6, 0, 0, 0, 3, 0, 0, 7],
        vec![3, 0, 0, 6, 8, 0, 0, 1, 0],
        vec![1, 9, 0, 2, 0, 0, 0, 0, 0],
        vec![6, 8, 5, 0, 0, 0, 1, 3, 0],
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0],
        vec![2, 1, 0, 0, 0, 0, 0, 0, 0],
        vec![4, 0, 3, 0, 0, 0, 0, 0, 6],
        vec![0, 0, 0, 0, 2, 0, 0, 0, 9],
        vec![0, 0, 0, 0, 4, 0, 8, 7, 0],
    ]);
}
