#[test]
fn free() {
    let _ = sudoku::solve([
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
    ])
    .unwrap();

    let _ = sudoku::solve(
        "................................................................................."
            .to_owned(),
    )
    .unwrap();
}

#[test]
fn solve() {
    let tests = [
        (
            [
                [9, 0, 0, 0, 7, 0, 0, 2, 0],
                [0, 8, 0, 0, 6, 0, 0, 0, 3],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [4, 0, 0, 0, 0, 0, 0, 0, 1],
                [2, 0, 0, 0, 4, 6, 3, 0, 0],
                [6, 0, 0, 0, 9, 0, 0, 0, 8],
                [0, 5, 0, 0, 3, 0, 0, 0, 7],
                [0, 0, 0, 4, 0, 1, 0, 0, 0],
                [0, 9, 0, 7, 0, 0, 1, 0, 0],
            ],
            [
                [9, 4, 1, 8, 7, 3, 6, 2, 5],
                [5, 8, 7, 2, 6, 4, 9, 1, 3],
                [3, 2, 6, 9, 1, 5, 8, 7, 4],
                [4, 3, 9, 5, 2, 8, 7, 6, 1],
                [2, 7, 8, 1, 4, 6, 3, 5, 9],
                [6, 1, 5, 3, 9, 7, 2, 4, 8],
                [1, 5, 2, 6, 3, 9, 4, 8, 7],
                [7, 6, 3, 4, 8, 1, 5, 9, 2],
                [8, 9, 4, 7, 5, 2, 1, 3, 6],
            ],
        ),
        (
            [
                [0, 6, 0, 0, 0, 3, 0, 0, 7],
                [3, 0, 0, 6, 8, 0, 0, 1, 0],
                [1, 9, 0, 2, 0, 0, 0, 0, 0],
                [6, 8, 5, 0, 0, 0, 1, 3, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [2, 1, 0, 0, 0, 0, 0, 0, 0],
                [4, 0, 3, 0, 0, 0, 0, 0, 6],
                [0, 0, 0, 0, 2, 0, 0, 0, 9],
                [0, 0, 0, 0, 4, 0, 8, 7, 0],
            ],
            [
                [5, 6, 8, 9, 1, 3, 4, 2, 7],
                [3, 4, 2, 6, 8, 7, 9, 1, 5],
                [1, 9, 7, 2, 5, 4, 6, 8, 3],
                [6, 8, 5, 4, 7, 9, 1, 3, 2],
                [7, 3, 4, 1, 6, 2, 5, 9, 8],
                [2, 1, 9, 5, 3, 8, 7, 6, 4],
                [4, 7, 3, 8, 9, 1, 2, 5, 6],
                [8, 5, 1, 7, 2, 6, 3, 4, 9],
                [9, 2, 6, 3, 4, 5, 8, 7, 1],
            ],
        ),
        (
            [
                [2, 0, 4, 0, 0, 0, 0, 0, 0],
                [1, 0, 7, 0, 9, 0, 0, 0, 2],
                [0, 0, 0, 0, 0, 0, 7, 0, 0],
                [6, 0, 0, 0, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 2, 0, 6, 0, 3],
                [8, 0, 1, 0, 4, 9, 0, 0, 0],
                [4, 0, 0, 0, 6, 0, 0, 7, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 9],
                [0, 0, 0, 3, 0, 0, 5, 6, 0],
            ],
            [
                [2, 8, 4, 7, 5, 3, 1, 9, 6],
                [1, 5, 7, 4, 9, 6, 8, 3, 2],
                [3, 9, 6, 2, 1, 8, 7, 4, 5],
                [6, 7, 2, 5, 3, 1, 9, 8, 4],
                [5, 4, 9, 8, 2, 7, 6, 1, 3],
                [8, 3, 1, 6, 4, 9, 2, 5, 7],
                [4, 1, 5, 9, 6, 2, 3, 7, 8],
                [7, 6, 3, 1, 8, 5, 4, 2, 9],
                [9, 2, 8, 3, 7, 4, 5, 6, 1],
            ],
        ),
    ];
    for (problem, expected) in tests {
        let r = sudoku::solve(problem).unwrap_or_else(|(_, e)| e);
        assert_eq!(r, expected, "problem: {:?}", problem);
    }
}

#[test]
fn solve_with_str() {
    let tests = [
        (
            "9...7..2..8..6...3.........4.......12...463..6...9...8.5..3...7...4.1....9.7..1..",
            "941873625587264913326915874439528761278146359615397248152639487763481592894752136",
        ),
        (
            "2.4......1.7.9...2......7..6....1.......2.6.38.1.49...4...6..7.........9...3..56.",
            "284753196157496832396218745672531984549827613831649257415962378763185429928374561",
        ),
        (
            ".6...3..73..68..1.19.2.....685...13..........21.......4.3.....6....2...9....4.87.",
            "568913427342687915197254683685479132734162598219538764473891256851726349926345871",
        ),
    ];
    for (problem, expected) in tests {
        let r = sudoku::solve(problem.to_owned()).unwrap_or_else(|(_, e)| e);
        assert_eq!(r, expected, "problem: {:?}", problem);
    }
}
